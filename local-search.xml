<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>解决Mac能上网但是打不开网页的问题</title>
    <link href="/2020/04/12/%E8%A7%A3%E5%86%B3Mac%E8%83%BD%E4%B8%8A%E7%BD%91%E4%BD%86%E6%98%AF%E6%89%93%E4%B8%8D%E5%BC%80%E7%BD%91%E9%A1%B5%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2020/04/12/%E8%A7%A3%E5%86%B3Mac%E8%83%BD%E4%B8%8A%E7%BD%91%E4%BD%86%E6%98%AF%E6%89%93%E4%B8%8D%E5%BC%80%E7%BD%91%E9%A1%B5%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>刚刚，像往常一样打开我的电脑，熟练的打开vpn，结果软件提示：“端口被占用或者是网络情况差”，正准备打开度娘搜一下怎么解决的时候，发现度娘挂了！！！</p><p>赶紧打开QQ，发现QQ是可以上去的，ping一下 baidu.com， 发现也是能够ping通的，这就奇了怪了，按照网上说的改DNS，恢复网络默认，发现都不太行，这时候看到了网络上的一个帖子，完美的解决了这个问题。</p><p>解决方法如下：</p><p>找到如下目录，只保留最后一个com.apple.Boot.plist文件，其他全删除，最后重启就行了</p><pre><code>/Library/Preferences/SystemConfiguration/com.apple.Boot.plist</code></pre><p><img src="/img/%E6%96%87%E7%AB%A0%E6%8F%92%E5%9B%BE/20412_1.jpg" srcset="/img/loading.gif" alt=""></p><p>补充：</p><p>   关于上面路径的使用方法，Finder -&gt; 菜单 -&gt; 前往 -&gt; 前往文件夹。</p>]]></content>
    
    
    
    <tags>
      
      <tag>故障排除</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【算法笔记03】全排列数（蓝桥杯，排列数）</title>
    <link href="/2020/04/09/%E3%80%90%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B003%E3%80%91%E5%85%A8%E6%8E%92%E5%88%97%E6%95%B0%EF%BC%88%E8%93%9D%E6%A1%A5%E6%9D%AF%EF%BC%8C%E6%8E%92%E5%88%97%E6%95%B0%EF%BC%89/"/>
    <url>/2020/04/09/%E3%80%90%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B003%E3%80%91%E5%85%A8%E6%8E%92%E5%88%97%E6%95%B0%EF%BC%88%E8%93%9D%E6%A1%A5%E6%9D%AF%EF%BC%8C%E6%8E%92%E5%88%97%E6%95%B0%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>全排列数是指一般把1~n这n个整数按照某个顺序摆放的结果。例如1，2，3，其全排列就是123，132，213，231，312，321。对于这个问题可以利用递归解决。</p><a id="more"></a><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>　　0、1、2三个数字的全排列有六种，按照字母序排列如下：<br>012、021、102、120、201、210<br>输入一个数n<br>求0~9十个数的全排列中的第n个（第1个为0123456789）。</p><p>输入格式</p><p>　　一行，包含一个整数n</p><p>输出格式</p><p>　　一行，包含一组10个数字的全排列</p><p>样例输入</p><p>1</p><p>样例输出</p><p>0123456789</p><p>数据规模和约定</p><p>　　0 &lt; n &lt;= 10!</p><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>主要有两种解决思路，一种是按照《算法笔记中》p115所示，利用递归写一个深搜：</p><p>假设有10个位置，需要在10个位置上依次放置0~9这十个数字。<br>1.先走到第一个位置，此时放置一个当前可以放置的数字当中最小的那个数字。<br>2.在走到第二个位置，放置一个当前可以放置的数字当中最小的那个数字。<br>…<br>3.到第10个位置时候，所有的数字已经放置完毕，属于第一个全排列。<br>4.收回第10个位置上的数字，此时还是只可以放置9，那么再到第9个位置面前，收回位置上的数字。<br>5.在第9个位置处，我们此时可以放置的数字有9，那么第10个位置放8.属于第二个全排列。<br>6.收回第10、9、8位置的数字，此时可以在第8个位置放置8.<br>…</p><p>用一个数组标记当前的数字是否已经被使用过了。<br>int p[10]; //一开始的时候没有被使用，初始化值为0.使用过了之后标记为1.<br>int hashTable[10]; // 表示这10个需要放置数字的位置。<br>深度优先搜索：</p><pre><code class="c++">#include &lt;bits/stdc++.h&gt;using namespace std;int n, p[10], hashTable[10];int num=0;void dfs(int index) {    if (index == 10) {//递归边界        num++;        if (num == n) {            for (int i = 0; i&lt;=9; i++) {                cout &lt;&lt; p[i];            }        }        return;    }    for (int i = 0; i &lt;=9; i++) {        if (hashTable[i] == 0) {            p[index] = i;            hashTable[i] = 1;            dfs(index + 1);            hashTable[i] = 0;        }    }}    int main(){        cin&gt;&gt;n;        dfs(0);        return 0;    }</code></pre><p>比较机智的做法是利用自带的库函数，<strong>在algorithm里面</strong>，贴一下大佬的博客</p><p><a href="https://www.liuchuo.net/archives/427" target="_blank" rel="noopener">https://www.liuchuo.net/archives/427</a></p><pre><code class="c++">#include &lt;bits/stdc++.h&gt;using namespace std;int main() {    string s = &quot;0123456789&quot;;    int n;    cin &gt;&gt; n;    int cnt = 1;    do {        if(cnt == n) {            cout &lt;&lt; s;            break;        }        cnt++;    }while(next_permutation(s.begin(), s.end()));    return 0;}</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>蓝桥杯，递归</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【算法笔记】全排列数（蓝桥杯，排列数）</title>
    <link href="/2020/04/09/%E3%80%90%E8%93%9D%E6%A1%A5%E6%9D%AF%E3%80%91%E6%8E%92%E5%88%97%E6%95%B0/"/>
    <url>/2020/04/09/%E3%80%90%E8%93%9D%E6%A1%A5%E6%9D%AF%E3%80%91%E6%8E%92%E5%88%97%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p>全排列数是指一般把1~n这n个整数按照某个顺序摆放的结果。例如1，2，3，其全排列就是123，132，213，231，312，321。对于这个问题可以利用递归解决。</p><a id="more"></a><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>　　0、1、2三个数字的全排列有六种，按照字母序排列如下：<br>012、021、102、120、201、210<br>输入一个数n<br>求0~9十个数的全排列中的第n个（第1个为0123456789）。</p><p>输入格式</p><p>　　一行，包含一个整数n</p><p>输出格式</p><p>　　一行，包含一组10个数字的全排列</p><p>样例输入</p><p>1</p><p>样例输出</p><p>0123456789</p><p>数据规模和约定</p><p>　　0 &lt; n &lt;= 10!</p><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>主要有两种解决思路，一种是按照《算法笔记中》p115所示，利用递归写一个深搜：</p><p>假设有10个位置，需要在10个位置上依次放置0~9这十个数字。<br>1.先走到第一个位置，此时放置一个当前可以放置的数字当中最小的那个数字。<br>2.在走到第二个位置，放置一个当前可以放置的数字当中最小的那个数字。<br>…<br>3.到第10个位置时候，所有的数字已经放置完毕，属于第一个全排列。<br>4.收回第10个位置上的数字，此时还是只可以放置9，那么再到第9个位置面前，收回位置上的数字。<br>5.在第9个位置处，我们此时可以放置的数字有9，那么第10个位置放8.属于第二个全排列。<br>6.收回第10、9、8位置的数字，此时可以在第8个位置放置8.<br>…</p><p>用一个数组标记当前的数字是否已经被使用过了。<br>int p[10]; //一开始的时候没有被使用，初始化值为0.使用过了之后标记为1.<br>int hashTable[10]; // 表示这10个需要放置数字的位置。<br>深度优先搜索：</p><pre><code class="c++">#include &lt;bits/stdc++.h&gt;using namespace std;int n, p[10], hashTable[10];int num=0;void dfs(int index) {    if (index == 10) {//递归边界        num++;        if (num == n) {            for (int i = 0; i&lt;=9; i++) {                cout &lt;&lt; p[i];            }        }        return;    }    for (int i = 0; i &lt;=9; i++) {        if (hashTable[i] == 0) {            p[index] = i;            hashTable[i] = 1;            dfs(index + 1);            hashTable[i] = 0;        }    }}    int main(){        cin&gt;&gt;n;        dfs(0);        return 0;    }</code></pre><p>比较机智的做法是利用自带的库函数，<strong>在algorithm里面</strong>，贴一下大佬的博客</p><p><a href="https://www.liuchuo.net/archives/427" target="_blank" rel="noopener">https://www.liuchuo.net/archives/427</a></p><pre><code class="c++">#include &lt;bits/stdc++.h&gt;using namespace std;int main() {    string s = &quot;0123456789&quot;;    int n;    cin &gt;&gt; n;    int cnt = 1;    do {        if(cnt == n) {            cout &lt;&lt; s;            break;        }        cnt++;    }while(next_permutation(s.begin(), s.end()));    return 0;}</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>蓝桥杯，递归</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【算法笔记02】n皇后问题（回溯+递归）</title>
    <link href="/2020/04/06/%E3%80%90%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B002%E3%80%91n%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98%EF%BC%88%E5%9B%9E%E6%BA%AF-%E9%80%92%E5%BD%92%EF%BC%89/"/>
    <url>/2020/04/06/%E3%80%90%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B002%E3%80%91n%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98%EF%BC%88%E5%9B%9E%E6%BA%AF-%E9%80%92%E5%BD%92%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>n皇后问题是一个以国际象棋为背景的问题：在n×n的国际象棋棋盘上放置n个皇后，使得任何一个皇后都无法直接吃掉其他的皇后，即任意两个皇后都不恩能够处于同一条横行、纵行或对角线上。</p><a id="more"></a><p>这个问题我们可以用递归的方法解决，再加上回溯算法进行优化。具体的优化证明在《算法笔记》P112页。</p><pre><code class="c++">void generateP(int index){   if(index == n+1){  //设置递归边界            count++;  //能达到这里说明是符合条件的      return;   }    for(int x=1;x&lt;=n;x++){  //第x行            if(hashTable[x]==false) //如果第x行没有皇后            flag=true; //表示和之前的皇后不会有冲突            for（int pre=1;pre&lt;index;pre++）{//遍历之前的皇后            //第index列皇后的行号为x，第pre列皇后的行号为P[pre]                if(abs(index-pre)==abs(x-P[pre])){                        flag = false; //与之前一个皇后的一条对角线冲突                        break;                }            }            if(flag){//如果可以把皇后放在第x行                    P[index] = x; //令第index列皇后的行号为x                    hashTable[x]=true; //第x行已经被占用                    generateP(index+1);  //递归处理第index+1行皇后                    hashTable[x]=false; //递归完毕，还原第x行为未占用            }        }}</code></pre><h4 id="下面我们来看一下2n皇后的问题"><a href="#下面我们来看一下2n皇后的问题" class="headerlink" title="下面我们来看一下2n皇后的问题"></a>下面我们来看一下2n皇后的问题</h4><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>　　给定一个n*n的棋盘，棋盘中有一些位置不能放皇后。现在要向棋盘中放入n个黑皇后和n个白皇后，使任意的两个黑皇后都不在同一行、同一列或同一条对角线上，任意的两个白皇后都不在同一行、同一列或同一条对角线上。问总共有多少种放法？n小于等于8。<br>输入格式<br>　　输入的第一行为一个整数n，表示棋盘的大小。<br>　　接下来n行，每行n个0或1的整数，如果一个整数为1，表示对应的位置可以放皇后，如果一个整数为0，表示对应的位置不可以放皇后。<br>输出格式<br>　　输出一个整数，表示总共有多少种放法。<br>样例输入<br>4<br>1 1 1 1<br>1 1 1 1<br>1 1 1 1<br>1 1 1 1<br>样例输出<br>2<br>样例输入<br>4<br>1 0 1 1<br>1 1 1 1<br>1 1 1 1<br>1 1 1 1<br>样例输出<br>0</p><p>如果你之前熟悉n皇后问题的解法，相信对于2n皇后问题也是很好理解的。如果对于n皇后问题还是不太清楚，那请浏览本人前面的文章，就很清楚n皇后后问题的递归与回溯解法。</p><pre><code class="c++">#include&lt;bits/stdc++.h&gt;using namespace std;const int maxn=11;int a[9][9];//输入的数组int count=0;int n;int P1[maxn] ,P2[maxn];int hashTable1[maxn] = {false},hashTable2[maxn] = {false};//标记某列是否被占用 void generateP(int index)//给第index行排黑与白皇后 {   if(index==n+1)   {        count++;        return ;   }   for(int x1=1;x1&lt;=n;x1++)//给第index行，第x1列排黑皇后 （先排黑皇后）    {        if(a[index][x1]&amp;&amp;hashTable1[x1]==false)//第x1列还没有黑皇后        {           bool flag1=true;// flag表示当前黑皇后不会和之前的皇后冲突           for(int pre=1;pre&lt;index;pre++)// 遍历index之前行排过的皇黑后           {//第index行的皇后的列号为x1,第pre行皇后的列号为P1[pre]                if(abs(index-pre)==abs(x1-P1[pre])) //横坐标之差==纵坐标之差                 {                  flag1=false;// 与之前的皇后在一条对角线,冲突                  break;                }           }           if(flag1)//如果可以把黑皇后放在第index行           {                   for(int x2=1;x2&lt;=n;x2++)                   {                       if(a[index][x2]&amp;&amp;hashTable2[x2]==false&amp;&amp;x2!=x1)//第x列还没有白皇后                       {                           bool flag2=true;// flag表示当前白皇后不会和之前的皇后冲突                        for(int pre=1;pre&lt;index;pre++)// 遍历index之前行排过的白皇后                        {//第index行的皇后的列号为x2,第pre行皇后的列号为P2[pre]                            if(abs(index-pre)==abs(x2-P2[pre])) //横坐标之差==纵坐标之差                             {                              flag2=false;// 与之前的白皇后在一条对角线,冲突                              break;                            }                        }                        if(flag2)                        {                            P1[index]=x1;//给第index行，x1列排黑皇后                             P2[index]=x2;//给第index行，x2列排白皇后                             hashTable1[x1]=true;//第x1列已经被占用                            hashTable2[x2]=true;//第x2列已经被占用                            generateP(index+1);//递归处理第index+1行以及之后行（index+1~n）的黑皇后和白皇后                            hashTable1[x1]=false;//递归完毕,还原第x1列为占用状态                            hashTable2[x2]=false;//递归完毕,还原第x2列为占用状态                        }                    }                }            }        }    }}int main(){    cin&gt;&gt;n;    for(int i=1;i&lt;=n;i++)         for(int j=1;j&lt;=n;j++)         cin&gt;&gt;a[i][j];    generateP(1);    printf(&quot;%d\n&quot;,count);  return 0;}</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>算法，回溯，递归</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【蓝桥杯】P1001（大数乘法）</title>
    <link href="/2020/04/04/%E3%80%90%E8%93%9D%E6%A1%A5%E6%9D%AF%E3%80%91P1001%EF%BC%88%E5%A4%A7%E6%95%B0%E4%B9%98%E6%B3%95%EF%BC%89/"/>
    <url>/2020/04/04/%E3%80%90%E8%93%9D%E6%A1%A5%E6%9D%AF%E3%80%91P1001%EF%BC%88%E5%A4%A7%E6%95%B0%E4%B9%98%E6%B3%95%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>利用模拟乘法过程的思想来解决，这也是川大夏令营考过的算法</p><a id="more"></a><p>　　当两个比较大的整数相乘时，可能会出现数据溢出的情形。为避免溢出，可以采用字符串的方法来实现两个大数之间的乘法。具体来说，首先以字符串的形式输入两个整数，每个整数的长度不会超过8位，然后把它们相乘的结果存储在另一个字符串当中（长度不会超过16位），最后把这个字符串打印出来。例如，假设用户输入为：62773417和12345678，则输出结果为：774980393241726.</p><p><strong>输入：</strong><br>　　62773417 12345678</p><p><strong>输出：</strong><br>　　774980393241726</p><h5 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h5><p>对于用字符串存大整数，并且进行乘法操作问题，主要考虑的就是进位的问题。而乘法不同于加减，加减只需要按位一位一位的去操作，我们小学就学过乘法计算的步骤，是被乘数依次去乘以乘数的每一位，然后进行相加，所以就不能直接一个循环去解决，而需要一个二重循环，具体思路见下图：</p><p><img src="/img/%E5%A4%A7%E6%95%B0%E4%B9%98%E6%B3%95.png" srcset="/img/loading.gif" alt=""></p><p>第一个循环记录乘法结果，第二个循环记录加法结果，同时利用循环巧妙的解决进位问题，具体代码如下：</p><pre><code class="c++">#include &lt;bits/stdc++.h&gt;using namespace std;int f[17][17]={0};int main(){    string s1,s2;    cin&gt;&gt;s1&gt;&gt;s2;    if(s1==&quot;0&quot;||s2==&quot;0&quot;){//没有这个的话最后一组用例无法通过        cout&lt;&lt;0;        return 0;    }    int m=0;//和jp一起作为f的下标    int rx=0;//乘法进位    for(int i=s2.length()-1;i&gt;=0;i--){        int jp =16 +(i-s2.length()+1);//16,15,14...        for(int j=s1.length()-1;j&gt;=0;j--){            int s = int(s2[i]-&#39;0&#39;)*int(s1[j]-&#39;0&#39;);            f[m][jp--]+=s%10;            f[m][jp] = s/10; //进位正好在前一位        }        m++;    }    int fin[17]={0};//记录加法最终结果    for(int k =16;k&gt;=0;k--){        for(int p = 0;p&lt;m;p++){            fin[k]+=f[p][k];        }        fin[k-1] = fin[k]/10;//记录进位        fin[k] = fin[k]%10;    }    int ii = 0;    while(fin[ii]==0)ii++;//忽略前导0    for(int i=ii;i&lt;17;i++){        cout&lt;&lt;fin[i];    }    return 0;}</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>蓝桥杯，算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【蓝桥杯】票据错误</title>
    <link href="/2020/04/04/%E3%80%90%E8%93%9D%E6%A1%A5%E6%9D%AF%E3%80%91%E7%A5%A8%E6%8D%AE%E9%94%99%E8%AF%AF/"/>
    <url>/2020/04/04/%E3%80%90%E8%93%9D%E6%A1%A5%E6%9D%AF%E3%80%91%E7%A5%A8%E6%8D%AE%E9%94%99%E8%AF%AF/</url>
    
    <content type="html"><![CDATA[<p>排序，注意断号和重号的判断，以及scanf(“%d”,&amp;a)!=EOF的使用</p><a id="more"></a><h5 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h5><p>某涉密单位下发了某种票据，并要在年终全部收回。</p><p>每张票据有唯一的ID号。全年所有票据的ID号是连续的，但ID的开始数码是随机选定的。</p><p>因为工作人员疏忽，在录入ID号的时候发生了一处错误，造成了某个ID断号，另外一个ID重号。</p><p>你的任务是通过编程，找出断号的ID和重号的ID。</p><p>假设断号不可能发生在最大和最小号。</p><h5 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h5><p>要求程序首先输入一个整数N(N&lt;100)表示后面数据行数。</p><p>接着读入N行数据。</p><p>每行数据长度不等，是用空格分开的若干个（不大于100个）正整数（不大于100000），请注意行内和行末可能有多余的空格，你的程序需要能处理这些空格。</p><p>每个整数代表一个ID号。</p><h5 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h5><p>要求程序输出1行，含两个整数m n，用空格分隔。</p><p>其中，m表示断号ID，n表示重号ID</p><p>样例输入1</p><p>2<br>5 6 8 11 9<br>10 12 9</p><p>样例输出1</p><p>7 9</p><p>样例输入2</p><p>6<br>164 178 108 109 180 155 141 159 104 182 179 118 137 184 115 124 125 129 168 196<br>172 189 127 107 112 192 103 131 133 169 158<br>128 102 110 148 139 157 140 195 197<br>185 152 135 106 123 173 122 136 174 191 145 116 151 143 175 120 161 134 162 190<br>149 138 142 146 199 126 165 156 153 193 144 166 170 121 171 132 101 194 187 188<br>113 130 176 154 177 120 117 150 114 183 186 181 100 163 160 167 147 198 111 119</p><p>样例输出2</p><p>105 120</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><pre><code class="c++">#include&lt;bits/stdc++.h&gt;using namespace std;int main(){    int n,a,num=0,ans1,ans2;    int p[105];    cin&gt;&gt;n;    while(scanf(&quot;%d&quot;,&amp;a)!=EOF)    {        p[num++]=a;    }    sort(p,p+num);    //寻找断号和重号     for(int i=0 ;i&lt;num-1 ;i++){        if(p[i]==p[i+1]) ans2 = p[i];        if(p[i]==p[i+1]-2) ans1 = p[i]+1;    }    cout&lt;&lt;ans1&lt;&lt;&quot; &quot;&lt;&lt;ans2&lt;&lt;endl;    return 0;} </code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>蓝桥杯，排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【蓝桥杯】转圈游戏（快速幂）</title>
    <link href="/2020/04/04/%E3%80%90%E8%93%9D%E6%A1%A5%E6%9D%AF%E3%80%91%E8%BD%AC%E5%9C%88%E6%B8%B8%E6%88%8F%EF%BC%88%E5%BF%AB%E9%80%9F%E5%B9%82%EF%BC%89/"/>
    <url>/2020/04/04/%E3%80%90%E8%93%9D%E6%A1%A5%E6%9D%AF%E3%80%91%E8%BD%AC%E5%9C%88%E6%B8%B8%E6%88%8F%EF%BC%88%E5%BF%AB%E9%80%9F%E5%B9%82%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>答案用找规律的方法归纳总结一下。这题是快速幂的一个代码模板，具体论述在《算法笔记》的P134-P136。</p><a id="more"></a><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>n 个小伙伴（编号从 0 到 n-1）围坐一圈玩游戏。按照顺时针方向给 n 个位置编号，从0 到 n-1。最初，第 0 号小伙伴在第 0 号位置，第 1 号小伙伴在第 1 号位置，……，依此类推。游戏规则如下：每一轮第 0 号位置上的小伙伴顺时针走到第 m 号位置，第 1 号位置小伙伴走到第 m+1 号位置，……，依此类推，第n ? m号位置上的小伙伴走到第 0 号位置，第n-m+1 号位置上的小伙伴走到第 1 号位置，……，第 n-1 号位置上的小伙伴顺时针走到第m-1 号位置。</p><p>现在，一共进行了 10^k轮，请问 x 号小伙伴最后走到了第几号位置。</p><h5 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h5><p>输入共 1 行,包含 4 个整数 n、m、k、x,每两个整数之间用一个空格隔开。</p><h5 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h5><p>　　输出共 1 行,包含 1 个整数,表示 10k 轮后 x 号小伙伴所在的位置编号。</p><h5 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h5><p>￼10 3 4 5</p><h5 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h5><p>5</p><h5 id="数据规模和约定"><a href="#数据规模和约定" class="headerlink" title="数据规模和约定"></a>数据规模和约定</h5><p>　　对于 30%的数据,0 &lt; k &lt; 7;<br>　　对于 80%的数据,0 &lt; k &lt; 10^7;<br>　　对于 100%的数据,1 &lt; n &lt; 1,000,000,0 &lt; m &lt; n,1 ≤ x ≤ n,0 &lt; k &lt; 10^9。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p><strong>**</strong>针对不同的题目，有两个细节需要注意<br>1）如果初始值a 大于 m ，那么需要在进入函数前就让a 对 m 取模，<br>2）若果m 为 1，可以直接在函数外部特判为 0，不需要进入函数来计算。（因为任何数对1 取模都是0。</p><p>快速幂的基本思路求a ^ b<br>1）当b是奇数时，那么有 a^b = a * a^*(b-1)<br>2）当b是偶数时，那么有 a^b = a^(b/2) * a^(b/2)<br>if(b % 2 == 1)可以改为if(b &amp; 1)</p><ol><li>因为b &amp; 1 是按位与，判断b的末尾是否为1 ，因此当b 为奇数时 b &amp; 1 返回为1，if条件成立，这样执行速度更快</li><li>k=k&gt;&gt;1 就相当于 k = (k &gt;&gt; 1)也就是把k的2进制数整体往右移动一位，最左边用0补充,右移1位相当于除以 2。。</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code class="c++">#include &lt;bits/stdc++.h&gt;using namespace std;#define ll long longint main(){ ll n,m,x,k; ll ans=1,t=10; cin&gt;&gt;n&gt;&gt;m&gt;&gt;k&gt;&gt;x; while(k) {  if(k&amp;1)//if(k%2==1)  ans=(ans*t)%n;  k=k&gt;&gt;1;//k=k/2;  t=(t*t)%n; } cout&lt;&lt;(x+ans*m)%n&lt;&lt;endl;}</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>蓝桥杯，快速幂</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【蓝桥杯】小数的第n位</title>
    <link href="/2020/04/02/%E3%80%90%E8%93%9D%E6%A1%A5%E6%9D%AF%E3%80%91%E5%B0%8F%E6%95%B0%E7%9A%84%E7%AC%ACn%E4%BD%8D/"/>
    <url>/2020/04/02/%E3%80%90%E8%93%9D%E6%A1%A5%E6%9D%AF%E3%80%91%E5%B0%8F%E6%95%B0%E7%9A%84%E7%AC%ACn%E4%BD%8D/</url>
    
    <content type="html"><![CDATA[<p>很久没有练习了，下一阶段开始看真题训练。这一题看起来很简单但是处理起来比较棘手。主要有两种做法，一种是模拟（网上有的模拟需要用队列来优化循环防止超时，但是我看到的这个博主的做法很巧妙，所以记录下来）。第二种是求逆元，需要一些初等数论的知识，具体证明在算法笔记的176页，后续更新。 </p><a id="more"></a><h2 id="资源限制"><a href="#资源限制" class="headerlink" title="资源限制"></a>资源限制</h2><p>时间限制：1.0s  内存限制：256.0MB</p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>　　我们知道，整数做除法时，有时得到有限小数，有时得到无限循环小数。<br>　　如果我们把有限小数的末尾加上无限多个0，它们就有了统一的形式。</p><p>　　本题的任务是：在上面的约定下，求整数除法小数点后的第n位开始的3位数。</p><p>输入格式</p><p>　　一行三个整数：a b n，用空格分开。a是被除数，b是除数，n是所求的小数后位置（0&lt;a,b,n&lt;1000000000）</p><p>输出格式</p><p>　　一行3位数字，表示：a除以b，小数后第n位开始的3位数字。</p><p>样例输入</p><p>1 8 1</p><p>样例输出</p><p>125</p><p>样例输入</p><p>1 8 3</p><p>样例输出</p><p>500</p><p>样例输入</p><p>282866 999000 6</p><p>样例输出</p><p>914</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这个问题看起来很简单，但是处理起来是很麻烦的，网上主流的有两种解决方法，第一种是模拟，但是不能用暴力的方法，不然会超时，我们可以利用数学方法巧妙地解决。</p><p>例如计算1/13的第13（即n=13）位小数，结果是0.33333…..，如果我们将这个结果乘以1*10^10，就变成了3333333333.3333……，利用这种方法可以减小n的数值。</p><p>对于这个例子，我们吧1*10^10%3的余数为1，次数n=n-10，即n=3；说明我们只需要对余数1再模拟出发运算三次就可以得到我们要的三个数的第一位数，运算两次就可以得到第二位和第三位小数。</p><pre><code class="c++">#include&lt;bits/stdc++&gt;using namespace std;typedef long long ll;int mian(){  ll a;  ll b;  int n;  cin&gt;&gt;a&gt;&gt;b&gt;&gt;n;  while(n-10&gt;0){//快速缩小n，逼近第n位    a*=1e10;    a%=b;    n-=10;  }  for(int i=0;i&lt;n+2;i++){    a*=10;//①因为之前对b取余得到的，所以此时的a一定小于吧，对a*10，在b取余时可以获得一位数    if(i&gt;n-1){      cout&lt;&lt;a/b;    }    a%=b;//①中说的取余  }  return 0;}</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>蓝桥杯</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【蓝桥杯】C/C++校内模拟赛(持续更新)</title>
    <link href="/2020/03/22/%E3%80%90%E8%93%9D%E6%A1%A5%E6%9D%AF%E3%80%91C-C-%E6%A0%A1%E5%86%85%E6%A8%A1%E6%8B%9F%E8%B5%9B-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%20%E4%B8%8B%E5%8D%8811.30.04/"/>
    <url>/2020/03/22/%E3%80%90%E8%93%9D%E6%A1%A5%E6%9D%AF%E3%80%91C-C-%E6%A0%A1%E5%86%85%E6%A8%A1%E6%8B%9F%E8%B5%9B-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%20%E4%B8%8B%E5%8D%8811.30.04/</url>
    
    <content type="html"><![CDATA[<p>这次模拟整体难度肯定是比不上正式的省赛的，但是因为种种原因，以及差不多一心情没怎么练习了，所以做的很差，有几个题没来的及看，后面有时间慢慢补上。</p><p><strong>3-22 更新1，2，3，4，5，6，10（该题完全错误）</strong></p><p><strong>3-26 更新7，8（bfs模板题）</strong></p> <a id="more"></a><h2 id="1、填空2"><a href="#1、填空2" class="headerlink" title="1、填空2"></a>1、填空2</h2><p>问题描述<br>　　1200000有多少个约数（只计算正约数）。<br>答案提交<br>　　这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。<br><strong>思路</strong>：没啥思路，考察的很基础。</p><pre><code class="c++">#include &lt;bits/stdc++.h&gt;using namespace std;int main(){    int n=1200000,sum=0;    for(int i=1;i&lt;=n;i++){        if(n%i==0){            cout&lt;&lt;i&lt;&lt;endl;            sum++;        }        }    cout&lt;&lt;sum&lt;&lt;endl;    return 0;}</code></pre><h2 id="2、填空1"><a href="#2、填空1" class="headerlink" title="2、填空1"></a>2、填空1</h2><p>问题描述<br>　　在计算机存储中，15.125GB是多少MB？<br>答案提交<br>　　这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。<br><strong>思路</strong>：不需要编程，直接乘就行了</p><p>15.125*1024=15488</p><h2 id="3、填空3"><a href="#3、填空3" class="headerlink" title="3、填空3"></a>3、填空3</h2><p>问题描述<br>　　一棵包含有2019个结点的二叉树，最多包含多少个叶结点？<br>答案提交<br>　　这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。<br><strong>思路</strong><br>数据结构基础知识：（2019+1）/2=1010</p><p>这个其实我考试的时候没想起来，隐约记得这个知识点，后来百度了才想起来，后面要好好看看大二时候的数据结构了。</p><h2 id="4、填空4"><a href="#4、填空4" class="headerlink" title="4、填空4"></a>4、填空4</h2><p>问题描述<br>　　在1至2019中，有多少个数的数位中包含数字9？<br>　　注意，有的数中的数位中包含多个9，这个数只算一次。例如，1999这个数包含数字9，在计算只是算一个数。<br>答案提交<br>　　这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><p><strong>思路</strong>：不算太难</p><pre><code class="c++">#include &lt;bits/stdc++.h&gt;using namespace std;int main(){    int sum = 0;    for(int i=1;i&lt;=2019;i++){        int t= i;        while(t)        {            if(t%10==9)            {                cout&lt;&lt;i&lt;&lt;endl;                sum++;                break;            }            t/=10;        }    }    cout&lt;&lt;sum&lt;&lt;endl;    return 0;}</code></pre><h2 id="5、代码题1"><a href="#5、代码题1" class="headerlink" title="5、代码题1"></a>5、代码题1</h2><p>问题描述<br>　　小明对类似于 hello 这种单词非常感兴趣，这种单词可以正好分为四段，第一段由一个或多个辅音字母组成，第二段由一个或多个元音字母组成，第三段由一个或多个辅音字母组成，第四段由一个或多个元音字母组成。<br>　　给定一个单词，请判断这个单词是否也是这种单词，如果是请输出yes，否则请输出no。<br>　　元音字母包括 a, e, i, o, u，共五个，其他均为辅音字母。<br>输入格式<br>　　输入一行，包含一个单词，单词中只包含小写英文字母。<br>输出格式<br>　　输出答案，或者为yes，或者为no。<br>样例输入<br>lanqiao<br>样例输出<br>yes<br>样例输入<br>world<br>样例输出<br>no<br>评测用例规模与约定<br>　　对于所有评测用例，单词中的字母个数不超过100。</p><p><strong>思路：</strong>第一段是辅音，第二段是元音，第三个是辅音，第四个是元音 ，用个标记符flag记录“转换的次数”，达到三次就行了。另外！= 和 ^(异或)作用应该是一样的</p><pre><code class="C++">#include &lt;bits/stdc++.h&gt;using namespace std;bool fun(char t){    if(t==&#39;a&#39;||t==&#39;e&#39;||t==&#39;i&#39;||t==&#39;o&#39;||t==&#39;u&#39;)        return true;    else        return false;}int main(){    string s;    cin&gt;&gt;s;    int flag=0;    if(fun(s[0])) //第一个字母为元音直接退出     {        cout&lt;&lt;&quot;no&quot;&lt;&lt;endl;        return 0;    }        for(int i=0;i&lt;s.size();i++){        if(fun(s[i])!=fun(s[i-1]))//第一段是辅音，第二段是元音，第三个是辅音，第四个是元音             flag++;    }    if(flag==3)        cout&lt;&lt;&quot;yes&quot;&lt;&lt;endl;    else        cout&lt;&lt;&quot;no&quot;&lt;&lt;endl;    return 0;}</code></pre><h2 id="6、代码题2"><a href="#6、代码题2" class="headerlink" title="6、代码题2"></a>6、代码题2</h2><p>问题描述<br>　　一个正整数如果任何一个数位不大于右边相邻的数位，则称为一个数位递增的数，例如1135是一个数位递增的数，而1024不是一个数位递增的数。<br>　　给定正整数 n，请问在整数 1 至 n 中有多少个数位递增的数？<br>输入格式<br>　　输入的第一行包含一个整数 n。<br>输出格式<br>　　输出一行包含一个整数，表示答案。<br>样例输入<br>30<br>样例输出<br>26<br>评测用例规模与约定<br>　　对于 40% 的评测用例，1 &lt;= n &lt;= 1000。<br>　　对于 80% 的评测用例，1 &lt;= n &lt;= 100000。<br>　　对于所有评测用例，1 &lt;= n &lt;= 1000000。<br><strong>思路：</strong>感觉不难，但是编程实现的时候着实费了点力气。主要就是出现了左大于右该如何处理。这里利用if判断的特性，调用函数返回0或者1来记录满足条件的数的个数</p><pre><code class="C++">#include &lt;bits/stdc++.h&gt;using namespace std;int main(){    int n,sum=0,l,r;    cin&gt;&gt;n;    for(int i=0;i&lt;n;i++){    int t=i,right=i%10;            while(t) {                t=t/10;                 int left=t%10;                if((left&gt;right) {                    break;                }                left=right;                t=t/10;            }            if(!t)             sum++;}        printf(&quot;%d\n&quot;,sum);} </code></pre><h2 id="7、代码题3"><a href="#7、代码题3" class="headerlink" title="7、代码题3"></a>7、代码题3</h2><p>问题描述<br>　　在数列 a[1], a[2], …, a[n] 中，如果对于下标 i, j, k 满足 0&lt;i&lt;j&lt;k&lt;n+1 且 a[i]&lt;a[j]&lt;a[k]，则称 a[i], a[j], a[k] 为一组递增三元组，a[j]为递增三元组的中心。<br>　　给定一个数列，请问数列中有多少个元素可能是递增三元组的中心。<br>输入格式<br>　　输入的第一行包含一个整数 n。<br>　　第二行包含 n 个整数 a[1], a[2], …, a[n]，相邻的整数间用空格分隔，表示给定的数列。<br>输出格式<br>　　输出一行包含一个整数，表示答案。<br>样例输入<br>5<br>1 2 5 3 5<br>样例输出<br>2<br>样例说明<br>　　a[2] 和 a[4] 可能是三元组的中心。<br>评测用例规模与约定<br>　　对于 50% 的评测用例，2 &lt;= n &lt;= 100，0 &lt;= 数列中的数 &lt;= 1000。<br>　　对于所有评测用例，2 &lt;= n &lt;= 1000，0 &lt;= 数列中的数 &lt;= 10000。</p><p><strong>思路：</strong>枚举。数据规模不大，暴力怼就完事了。</p><p>枚举每个元素，寻找比该元素之前小的和该元素之后大的，两个条件位真，ans++;</p><pre><code class="C++">#include&lt;bits/stdc++.h&gt;using namespace std;int main(){    int n,ans=0;    cin&gt;&gt;n;    int data[n];    for(int i=0;i&lt;n;i++){        cin&gt;&gt;data[i];    }    for(int i=1;i&lt;=n-1;i++){        int hasSmall = 0;        for(int j=0;j&lt;i;j++){            if(data[j]&lt;data[i]){                hasSmall=1;                break;            }        }        int hasBig = 0;        for(int k=i+1;k&lt;n;k++){            if(data[k]&gt;data[i]){                hasBig=1;                break;            }        }        if(hasSmall&amp;&amp;hasBig)        ans++;    }    cout&lt;&lt;ans&lt;&lt;endl;    return 0;} </code></pre><h2 id="8、代码题4"><a href="#8、代码题4" class="headerlink" title="8、代码题4"></a>8、代码题4</h2><p>问题描述<br>　　小明想知道，满足以下条件的正整数序列的数量：<br>　　1. 第一项为 n；<br>　　2. 第二项不超过 n；<br>　　3. 从第三项开始，每一项小于前两项的差的绝对值。<br>　　请计算，对于给定的 n，有多少种满足条件的序列。<br>输入格式<br>　　输入一行包含一个整数 n。<br>输出格式<br>　　输出一个整数，表示答案。答案可能很大，请输出答案除以10000的余数。<br>样例输入<br>4<br>样例输出<br>7<br>样例说明<br>　　以下是满足条件的序列：<br>　　4 1<br>　　4 1 1<br>　　4 1 2<br>　　4 2<br>　　4 2 1<br>　　4 3<br>　　4 4<br>评测用例规模与约定<br>　　对于 20% 的评测用例，1 &lt;= n &lt;= 5；<br>　　对于 50% 的评测用例，1 &lt;= n &lt;= 10；<br>　　对于 80% 的评测用例，1 &lt;= n &lt;= 100；<br>　　对于所有评测用例，1 &lt;= n &lt;= 1000。<br><strong>思路：</strong>应该是个DP问题，我甚至都不打算看了……</p><pre><code></code></pre><h2 id="9、代码题5"><a href="#9、代码题5" class="headerlink" title="9、代码题5"></a>9、代码题5</h2><p>问题描述<br>　　小明有一块空地，他将这块空地划分为 n 行 m 列的小块，每行和每列的长度都为 1。<br>　　小明选了其中的一些小块空地，种上了草，其他小块仍然保持是空地。<br>　　这些草长得很快，每个月，草都会向外长出一些，如果一个小块种了草，则它将向自己的上、下、左、右四小块空地扩展，这四小块空地都将变为有草的小块。<br>　　请告诉小明，k 个月后空地上哪些地方有草。<br>输入格式<br>　　输入的第一行包含两个整数 n, m。<br>　　接下来 n 行，每行包含 m 个字母，表示初始的空地状态，字母之间没有空格。如果为小数点，表示为空地，如果字母为 g，表示种了草。<br>　　接下来包含一个整数 k。<br>输出格式<br>　　输出 n 行，每行包含 m 个字母，表示 k 个月后空地的状态。如果为小数点，表示为空地，如果字母为 g，表示长了草。<br>样例输入<br>4 5<br>.g…<br>…<br>…g…<br>…<br>2<br>样例输出<br>gggg.<br>gggg.<br>ggggg<br>.ggg.<br>评测用例规模与约定<br>　　对于 30% 的评测用例，2 &lt;= n, m &lt;= 20。<br>　　对于 70% 的评测用例，2 &lt;= n, m &lt;= 100。<br>　　对于所有评测用例，2 &lt;= n, m &lt;= 1000，1 &lt;= k &lt;= 1000。<br><strong>思路：</strong>典型的bfs，基本是个模板题。时间复杂度最多为O(N*M)。</p><p>下面贴的是老师写的代码，是bfs的板子，但是写法不是很常规，有很多东西书上都没有写，关于bfs和dfs，这俩是大二上学期数据结构重点上的，但是我们的水货老师根本没怎么讲- -，最后也没考，所有就没怎么复习，但是既然开始学习算法了，就应该好好学一下，周六周日的时候会写两篇文章好好的复习一下这两个算法。</p><pre><code class="C++">#include &lt;iostream&gt;#include &lt;queue&gt;#define loop(i, x, y) for(register int i = x;i &lt;= y;i++)using namespace std;//草地上的一块struct block {    int i;    int j;    int month;};const int dx[] = {1, 0, -1, 0};const int dy[] = {0, 1, 0, -1};int vis[1000][1000]{};int N, M, K;int main() {    ios::sync_with_stdio(0);    cin.tie(0);    cout.tie(0);    //freopen(&quot;in&quot;, &quot;r&quot;, stdin);    //freopen(&quot;out&quot;, &quot;w&quot;, stdout);    int a = clock();    cin &gt;&gt; N &gt;&gt; M;    queue&lt;block&gt; q;    char next_char;    cin.get(next_char);    while (next_char != &#39;\n&#39;)cin.get(next_char);    loop(i, 0, N - 1) {        loop(j, 0, M - 1) {            cin.get(next_char);            if (next_char == &#39;g&#39;) {                q.push({i, j, 0});                vis[i][j] = 1;            }        }        cin.get(next_char);        while (next_char != &#39;\n&#39;)cin.get(next_char);    }    cin &gt;&gt; K;    while (!q.empty()) {        block b = q.front();        q.pop();        int month = b.month;        if (month &lt; K) {            loop(i, 0, 3) {                int nx = b.i + dx[i];                int ny = b.j + dy[i];                if (0 &lt;= nx &amp;&amp; nx &lt; N &amp;&amp; 0 &lt;= ny &amp;&amp; ny &lt; M &amp;&amp; vis[nx][ny] == 0) {                    vis[nx][ny] = 1;                    q.push({nx, ny, month + 1});                }            }        }    }    loop(i, 0, N - 1) {        loop(j, 0, M - 1) {            if (vis[i][j] == 1) cout &lt;&lt; &#39;g&#39;;            else cout &lt;&lt; &#39;.&#39;;        }        cout &lt;&lt; endl;    }    clog &lt;&lt; clock() - a &lt;&lt; endl;    return 0;}</code></pre><p><strong>常规写法：</strong></p><pre><code class="c++">#include &lt;bits/stdc++.h&gt;#define MAXN 1007using namespace std;struct Point { int x,y,c; };int n,m,k,way[4][2]={{1,0},{-1,0},{0,1},{0,-1}};char dt[MAXN][MAXN]; bool f[MAXN][MAXN];queue&lt;Point&gt; Q;int main() {    memset(f,0,sizeof(f));    scanf(&quot;%d%d&quot;,&amp;n,&amp;m);    for (int i=0;i&lt;n;i++) {        scanf(&quot;%s&quot;,dt[i]);        for (int j=0;j&lt;m;j++)            if (dt[i][j]==&#39;g&#39;)                f[i][j]=true,Q.push((Point){i,j,0});    }    scanf(&quot;%d&quot;,&amp;k);    while(!Q.empty()) {        Point now=Q.front(); Q.pop();        if (now.c==k) break;        for (int i=0;i&lt;4;i++) {            int tx=now.x+way[i][0],ty=now.y+way[i][1];            if (tx&lt;0 || tx&gt;n || ty&lt;0 || ty&gt;m) continue;            dt[tx][ty]=&#39;g&#39;;            if (!f[tx][ty]) Q.push((Point){tx,ty,now.c+1});        }    }    for (int i=0;i&lt;n;i++) printf(&quot;%s\n&quot;,dt[i]);    return 0;}</code></pre><h2 id="10、代码题6"><a href="#10、代码题6" class="headerlink" title="10、代码题6"></a>10、代码题6</h2><p>问题描述<br>　　小明要组织一台晚会，总共准备了 n 个节目。然后晚会的时间有限，他只能最终选择其中的 m 个节目。<br>　　这 n 个节目是按照小明设想的顺序给定的，顺序不能改变。<br>　　小明发现，观众对于晚上的喜欢程度与前几个节目的好看程度有非常大的关系，他希望选出的第一个节目尽可能好看，在此前提下希望第二个节目尽可能好看，依次类推。<br>　　小明给每个节目定义了一个好看值，请你帮助小明选择出 m 个节目，满足他的要求。<br>输入格式<br>　　输入的第一行包含两个整数 n, m ，表示节目的数量和要选择的数量。<br>　　第二行包含 n 个整数，依次为每个节目的好看值。<br>输出格式<br>　　输出一行包含 m 个整数，为选出的节目的好看值。<br>样例输入<br>5 3<br>3 1 2 5 4<br>样例输出<br>3 5 4<br>样例说明<br>　　选择了第1, 4, 5个节目。<br>评测用例规模与约定<br>　　对于 30% 的评测用例，1 &lt;= n &lt;= 20；<br>　　对于 60% 的评测用例，1 &lt;= n &lt;= 100；<br>　　对于所有评测用例，1 &lt;= n &lt;= 100000，0 &lt;= 节目的好看值 &lt;= 100000。<br><strong>思路：</strong>考察了sort函数的cmp参数，但是感觉简单过头了啊，是不是我理解错了？等后面成绩出来再看看吧</p><pre><code class="c++">#include &lt;bits/stdc++.h&gt;using namespace std;const int maxn=100000;bool cmp(int x,int y){    return x &gt; y;}int main(){    int n,m,a[maxn],t[maxn];    cin&gt;&gt;n&gt;&gt;m;    for(int i=0;i&lt;n;i++){        cin&gt;&gt;a[i];        t[i]=a[i];    }    sort(a,a+n,cmp);    int tmp=a[m];    for(int i=0;i&lt;n;i++)    {        if(t[i]&gt;tmp)            cout&lt;&lt;t[i]&lt;&lt;&quot; &quot;;    }    return 0;}</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【算法笔记01】川大夏令营-约瑟夫环</title>
    <link href="/2020/03/21/%E3%80%90%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B001%E3%80%91%E5%B7%9D%E5%A4%A7%E5%A4%8F%E4%BB%A4%E8%90%A5-%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF/"/>
    <url>/2020/03/21/%E3%80%90%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B001%E3%80%91%E5%B7%9D%E5%A4%A7%E5%A4%8F%E4%BB%A4%E8%90%A5-%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="约瑟夫环问题描述"><a href="#约瑟夫环问题描述" class="headerlink" title="约瑟夫环问题描述"></a>约瑟夫环问题描述</h2><p>已知<strong>n</strong>个人围成一圈（编号：1，2，3，…，n），从编号为1的人开始报数，报数为<strong>m</strong>的那个人出列；从他的下一个人又从1开始数，同样报数为<strong>m</strong>的人出列；依此循环下去，直到剩余一个人。<strong>求最后这一个人在最开始的序列中编号是几号？</strong></p> <a id="more"></a><h2 id="普通解法"><a href="#普通解法" class="headerlink" title="普通解法"></a>普通解法</h2><p>刚学数据结构的时候，我们可能用链表的方法去模拟这个过程，N个人看作是N个链表节点，节点1指向节点2，节点2指向节点3，……，节点N-1指向节点N，节点N指向节点1，这样就形成了一个环。然后从节点1开始1、2、3……往下报数，每报到M，就把那个节点从环上删除。下一个节点接着从1开始报数。最终链表仅剩一个节点。它就是最终的胜利者。</p><p>PS:这个是网上随便找的，等有空再更新</p><pre><code class="c">#include &lt;cstdio&gt;int n,k;struct node{    int x;    node *next;    node(int c):x(c),next(NULL){}};node *first=NULL;int main(){    scanf(&quot;%d %d&quot;,&amp;n,&amp;k);    node *last=new node(1);    first=last;    for(int i=2;i&lt;=n;i++)    last-&gt;next=new node(i),last=last-&gt;next;    last-&gt;next=first;    for(int i=1;i&lt;=n;i++)    {        for(int j=1;j&lt;k;j++)        last=first,first=first-&gt;next;        printf(&quot;%d &quot;,first-&gt;x);        last-&gt;next=first-&gt;next;        first=first-&gt;next;    }}</code></pre><h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><p>要模拟整个游戏过程，时间复杂度高达O(nm)，当n，m非常大(例如上百万，上千万)的时候，几乎是没有办法在短时间内出结果的。</p><h2 id="递归求解分析"><a href="#递归求解分析" class="headerlink" title="递归求解分析"></a>递归求解分析</h2><p>将这n个人从0~n-1编号（1是习惯从0开始；2是如果m大于等于n时，第一个出列的人编号是m%n，m%n可能等于0，简化后续序列的模式化处理），则报数为m-1的人出列，最后结果加1就为原问题的解，以下，我们来分析出列的过程：</p><p>第一次出列-n阶约瑟夫环的问题（n个人）<br>0，1，2，3，4，5，…，n-2，n-1<br>第一次出列的人的编号为<strong>(m-1)%n1</strong>（记n1为第一次编号的总人数），从他的下一个人又开始从0开始报数，为了方便我们记k1=m%n1，如下：<br>0，1，2，3，4，5，…，k1-1(第一次出列人的编号(m-1)%n1)，k1，k1+1，…，n-2，n-1</p><p>由于第二次出列是是从k1开始，又从0开始报数，为了便于模式化我们将第一次出列后的序列排序如下：<br>k1，k1+1，k1+2，…，n-2，n-1，0，1，2，3，4，5，…，k1-3，k1-2（k1-1第一次已经出列）</p><p>第二次出列-n-1阶约瑟夫环问题（n-1个人）<br>对上述序列重新编号：<br>0，1，2，3，4，5，…，n-2<br>第二次出列的人的编号为<strong>(m-1)%n2</strong>（记n2为第一次编号的总人数），从他的下一个人又开始从0开始报数，为了方便我们记k2=m%n2，如下：<br>0，1，2，3，4，5，…，k2-1(第二次出列人的编号(m-1)%n2)，k2，k2+1，…，n-2<br>同样重新排序如下：<br>k2，k2+1，k2+2，…，n-2，n-1，0，1，2，3，4，5，…，k2-3，k2-2（k2-1第二次已经出列）</p><p>第三次出列-n-2阶约瑟夫环问题（n-2个人）<br>对上述序列重新编号：<br>0，1，2，3，4，5，…，n-3<br>…</p><p>第N-1次出列-2阶约瑟夫环问题（2个人）<br>k(n-1)，k(n-1)+1<br>重新编号：<br>0，1<br>第n-1次出列的人的编号为：m%n(n-1)，记下一个人的为k(n-1)=m%n2<br>k(n-1)</p><p>第N次出列-1阶约瑟夫环问题（1个人）<br>对上述序列重新编号：<br>0<br>直接得出结果为0。</p><h2 id="结论总结"><a href="#结论总结" class="headerlink" title="结论总结"></a>结论总结</h2><p>以上我们将问题转换为模式相同且规模逐渐缩小的问题，当规模最小即只有一个人n=1时，报数为m-1的人出列，最后出列的人编号为0；当n=2时，报数为m-1的人出列，最后出列人的编号是多少？应该是只有一个人时得到最后出列的序号加上m（因为报数为m-1的人已经出列，剩下那个人才最后出列所以才加上m）<br>n=1时，f(1)=0；<br>n=2时，f(2)=[f(1)+m]%2；<br>n=3时，f(3)=[f(2)+m]%3；<br>验证结果：2个人围成一圈，数到3的那人出列，求最后那个人的编号？n=2，m=3<br>f(2)=[f(1)+m]%2=[0+3]%2=1<br>最后结果加1，则result=2；</p><p>代码：</p><pre><code class="c++">#include&lt;stdio.h&gt;int fun(int n,int m){ if(n==1)  return 0; else   return (fun(n-1,m)+m)%n;}int main(){ int n,m; cin&gt;&gt;n&gt;&gt;m; int count=fun(n,m); cout&gt;&gt;count+1&gt;&gt;endl; return 0;} </code></pre><h2 id="数学归纳法"><a href="#数学归纳法" class="headerlink" title="数学归纳法"></a>数学归纳法</h2><p>f(1)=0；//递归出口<br>f(n)=[f(n-1)+m]%n；//递归体`</p><p>这里就不用归纳法了，时间复杂度太高，直接从上述总结公式</p><p><strong>递推公式：</strong><br>$$<br>f(N,M)=(f(N−1,M)+M)<br>$$</p><ul><li>$f(N,M)$表示，N个人报数，每报到M时出列那个人，最终胜利者的编号</li><li>$f(N−1,M)$表示，N-1个人报数，每报到M时出列那个人，最终胜利者的编号</li></ul><pre><code class="c">#include&lt;bits/stdc++.h&gt;using namespace std;int main(){ int n,m=3; cin&gt;&gt;n; int ans=0,i=0; for(i=1;i&lt;=n;i++){  ans=(ans+m)%i; } cout&lt;&lt;ans+1; return 0;}</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
